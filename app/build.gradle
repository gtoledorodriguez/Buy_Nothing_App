/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    //id 'application'

    id 'java-library'
    id 'java'
    id 'jacoco'
    id 'war'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    
	// This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    
    implementation 'jakarta.platform:jakarta.jakartaee-web-api:9.0.0'
    
    // These two de[pendencies are needed because Apache Tomcat is only a servelet container
    // not a full JEE server
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:3.0.4'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.0.4'
    
    // GSON
    implementation 'com.google.code.gson:gson:2.9.0'
    
    // Uncomment the next line and comment out the GSON if you prefer to use Jackson instead
    // implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:3.0.4'
}

//application {
    // Define the main class for the application.
    //mainClass = 'edu.iit.cs445.spring22.App'
//}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

war {
   archiveName 'bn.war'
}
